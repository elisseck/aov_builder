<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function aov_builder_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Adding custom validation for the welcome page type field.
  if ($form['#form_id']== 'webform_submission_build_calculator_add_form') {
	$heroData = aov_builder_query_heroes();
	$itemData = aov_builder_query_items();
	$arcanaData = aov_builder_query_arcana();
	$skillAndBonusData = aov_builder_query_skills_and_bonuses();
	$form['#attached']['drupalSettings']['skillAndBonusData'] = $skillAndBonusData;
	$form['#attached']['drupalSettings']['arcanaData'] = $arcanaData;
	$form['#attached']['drupalSettings']['heroData'] = $heroData;
	$form['#attached']['drupalSettings']['itemData'] = $itemData;
	$form['#attached']['library'][] = 'aov_builder/build_calculator';
	return $form;
  }
}

function aov_builder_query_heroes() {
  $data = array();
  $heroKeys = array(
  "field_ability_power",
  "field_ad_per_level",
  "field_armor",
  "field_armor_per_level",
  "field_as_per_level",
  "field_attack_damage",
  "field_attack_speed",
  "field_cdr",
  "field_crit_chance",
  "field_critd_per_level",
  "field_critical_damage",
  "field_flat_pen_ad",
  "field_flat_pen_ap",
  "field_hp",
  "field_hp5_per_level",
  "field_hp_per_level",
  "field_hp_regen_5_seconds",
  "field_life_steal",
  "field_magic_defense",
  "field_magic_life_steal",
  "field_mana",
  "field_mana5_per_level",
  "field_mana_per_level",
  "field_mana_regen_5_seconds",
  "field_md_per_level",
  "field_movement_speed",
  "field_percent_pen_ad",
  "field_percent_pen_ap",
  );
  $query = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'hero');
  $nids = $query->execute();
  $nodes = entity_load_multiple('node', $nids);
  foreach ($nodes as $node) {
	$nid = $node->id();
    foreach ($heroKeys as $key) {
	  $data[$nid][$key]['values'] = $node->get($key)->getValue();
	  $data[$nid][$key]['labels'] = $node->$key->getFieldDefinition()->getLabel();
	  $data[$nid]['title'] = $node->label();
    }
  }
  return $data;
}

function aov_builder_query_items() {
  $data = array();
  $itemKeys = array(
  "field_ability_power",
  "field_armor",
  "field_attack_damage",
  "field_attack_speed",
  "field_cdr",
  "field_crit_chance",
  "field_flat_pen_ad",
  "field_flat_pen_ap",
  "field_hp",
  "field_hp_regen_5_seconds",
  "field_life_steal",
  "field_magic_defense",
  "field_magic_life_steal",
  "field_mana",
  "field_mana_regen_5_seconds",
  "field_movement_speed",
  "field_percent_pen_ad",
  "field_percent_pen_ap",
  "field_passive_description",
  "field_cost",
  "field_movement_speed",
  "field_movement_speed_percent",
  );
  $query = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'item');
  $nids = $query->execute();
  $nodes = entity_load_multiple('node', $nids);
  foreach ($nodes as $node) {
    $nid = $node->id();
	foreach ($itemKeys as $key) {
	  $data[$nid][$key] = $node->get($key)->getValue();
	}
  }
  return $data;
}

function aov_builder_query_arcana() {
  $data = array();
  $arcanaKeys = array(
  "field_ability_power",
  "field_armor",
  "field_attack_damage",
  "field_attack_speed",
  "field_cdr",
  "field_crit_chance",
  "field_critical_damage",
  "field_flat_pen_ad",
  "field_flat_pen_ap",
  "field_hp",
  "field_hp_regen_5_seconds",
  "field_life_steal",
  "field_magic_defense",
  "field_magic_life_steal",
  "field_movement_speed_percent",
  "field_cost",
  "field_gold_value",
  );
  $query = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'arcana');
  $nids = $query->execute();
  $nodes = entity_load_multiple('node', $nids);
  foreach ($nodes as $node) {
    $nid = $node->id();
	foreach ($arcanaKeys as $key) {
	  $data[$nid][$key]['values'] = $node->get($key)->getValue();
	}
  }
  return $data;
}

function aov_builder_query_skills_and_bonuses() {
  $data = array();
  //get skills
  $skillKeys = array(
  "field_scaling",
  "field_scaling_stat",
  "body",
  "field_hero",
  "field_cooldown",
  "field_cooldown_per_level",
  "field_output_type",
  "field_skill_cost",
  "field_skill_type",
  "field_level_1",
  "field_skill_damage_per_level",
  );
  $skillQuery = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'skill');
  $skillNids = $skillQuery->execute();
  $skillNodes = entity_load_multiple('node', $skillNids);

  //get bonuses
  $bonusKeys = array(
  "body",
  "field_bonus_damage_level_1",
  "field_bonus_damage_per_level",
  "field_damage_over_time",
  "field_output_type",
  "field_scaling",
  "field_scaling_stat",
  "field_skill_reference",
  );
  $bonusQuery = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'bonus');
  $bonusNids = $bonusQuery->execute();
  $bonusNodes = entity_load_multiple('node', $bonusNids);

  //get scaling stats from term
  $termQuery = \Drupal::entityQuery('taxonomy_term')
   ->condition('vid', 'scaling_stats');
  $tids = $termQuery->execute();
  $statTerms = entity_load_multiple('taxonomy_term', $tids);
  
  //get output types from term
  $outputQuery = \Drupal::entityQuery('taxonomy_term')
   ->condition('vid', 'output_type');
  $stids = $outputQuery->execute();
  $outputTerms = entity_load_multiple('taxonomy_term', $stids);
  
  //assemble data keyed by hero, then skill, then bonuses
  foreach ($skillNodes as $node) {
	$heroID = $node->get('field_hero')->getValue()[0]['target_id'];
	$nid = $node->id();
	$data[$heroID][$nid]['title']['values'] = $node->getTitle();
	foreach ($skillKeys as $key) {
	  if ($key == 'field_scaling_stat') {
	    $statTarget = $node->get('field_scaling_stat')->getValue()[0]['target_id'];
		if ($statTerms[$statTarget]) {
			dpm($statTerms[$statTarget]->get('description')->value);
		  $data[$heroID][$nid][$key]['values'] = strip_tags($statTerms[$statTarget]->get('description')->value);
		  //$data[$heroID][$nid][$key]['values']['title'] = $statTerms[$statTarget]->getName();
		}
	  } else if ($key == 'field_output_type') {
	    $outputTarget = $node->get('field_output_type')->getValue()[0]['target_id'];
		if ($outputTerms[$outputTarget]) {
			dpm($outputTerms[$outputTarget]->get('description')->value);
		  $data[$heroID][$nid][$key]['values'] = strip_tags($outputTerms[$outputTarget]->get('description')->value);
		  //$data[$heroID][$nid][$key]['values']['title'] = $outputTerms[$outputTarget]->getName();
	    } else {
		  $data[$heroID][$nid][$key]['values'] = "N/A";
		}
	  }
	  else {
		$data[$heroID][$nid][$key]['values'] = $node->get($key)->getValue();
	  }
	  foreach ($bonusNodes as $bNode) {
	    $skillID = $bNode->get('field_skill_reference')->getValue()[0]['target_id'];
		$bStatTarget = $bNode->get('field_scaling_stat')->getValue()[0]['target_id'];
		$bOutputTarget = $bNode->get('field_output_type')->getValue()[0]['target_id'];
	    $bNid = $bNode->id();
		if ($skillID == $nid) {
	      foreach ($bonusKeys as $bKey) {
			if ($bKey == 'field_scaling_stat') {
			  if ($statTerms[$bStatTarget]) {
			    $data[$heroID][$nid]['bonuses'][$bNid][$bKey]['values'] = $statTerms[$bStatTarget]->get('description')->value;
				//$data[$heroID][$nid]['bonuses'][$bNid][$bKey]['values']['title'] = $statTerms[$bStatTarget]->getName();
			  }
			} else if ($bKey == 'field_output_type') {
			  if ($outputTerms[$bOutputTarget]) {
			    $data[$heroID][$nid]['bonuses'][$bNid][$bKey]['values'] = $outputTerms[$bOutputTarget]->get('description')->value;
				//$data[$heroID][$nid]['bonuses'][$bNid][$bKey]['values']['title'] = $outputTerms[$bOutputTarget]->getName();
			  }
			} else {
			  $data[$heroID][$nid]['bonuses'][$bNid][$bKey]['values'] = $bNode->get($bKey)->getValue();
			}
	      }
		}
      }
	}
  }
  return $data;
}