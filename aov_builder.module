<?php

use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\aov_builder\Form\BuildComparison;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\SettingsCommand;

/**
 * Implements hook_form_alter().
 */
function aov_builder_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //Build Calculator Form
  if ($form['#form_id']== 'webform_submission_build_calculator_add_form') {
    //Get hero param and ajax callback for data to pass to JS
    if (isset($_GET['hero'])) {
      $heroParam = $_GET['hero'];
	  //$form['elements']['hero']['#value'] = $heroParam;
	  $form['elements']['hero']['#default_value'] = $heroParam;
    }
    else {
    //Set a default value so the form doesn't take 100 years to load
      $heroParam = '227';
    }
	$heroData = aov_builder_query_heroes(array('hero' => $heroParam));
    $itemData = aov_builder_query_items();
    $arcanaData = aov_builder_query_arcana();
    $skillAndBonusData = aov_builder_query_skills_and_bonuses(array('hero' => $heroParam));
    $form['elements']['hero']['#ajax'] = array(
	  'callback' => 'aov_builder_loadData',
      'event' => 'change',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Loading Build...'),
      ),
	);
	$form['ajax_response'] = array(
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t(' '),
      '#attributes' => array(
        'id' => array('ajax_placeholder'),
      ),
    );
	foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aov_builder_submit_build';
      }
    }
	$form['#attached']['drupalSettings']['skillAndBonusData'] = $skillAndBonusData;
    $form['#attached']['drupalSettings']['arcanaData'] = $arcanaData;
    $form['#attached']['drupalSettings']['heroData'] = $heroData;
    $form['#attached']['drupalSettings']['itemData'] = $itemData;
	$form['#attached']['library'][] = 'aov_builder/build_calculator';
	return $form;
  }
  //Build Comparison Form
  else if ($form['#form_id'] == 'webform_submission_build_comparison_add_form') {
	if (isset($_GET['build'])) {
	  $form['elements']['build_1']['#value'] = $_GET['build'];
	}
	$form['elements']['build_2']['#ajax'] = array(
	  'callback' => 'aov_builder_loadBuild',
      'event' => 'change',
      'wrapper' => 'ajax-placeholder',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Loading Build...'),
      ),
	);
	$form['elements']['build_1']['#ajax'] = array(
	  'callback' => 'aov_builder_loadBuild',
      'event' => 'change',
      'wrapper' => 'ajax-placeholder',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Loading Build...'),
      ),
	);
	// Add placeholder for Ajax response markup
    $form['ajax_response_1'] = array(
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t(' '),
      '#attributes' => array(
        'id' => array('ajax_placeholder_build_1'),
      ),
    );
	$form['ajax_response_2'] = array(
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t(' '),
      '#attributes' => array(
        'id' => array('ajax_placeholder_build_2'),
      ),
    );
	$form['#attached']['library'][] = 'aov_builder/build_comparison';
	foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'aov_builder_submit_comparison';
      }
    }
	return $form;
  }
  //Damage Calculator Form
  else if ($form['#form_id'] == 'webform_submission_damage_calculator_add_form') {
    if (isset($_GET['build'])) {
      $form['elements']['build_1']['#value'] = $_GET['build'];
    }
	$form['elements']['build_2']['#ajax'] = array(
	  'callback' => 'aov_builder_loadDamageCalculatorBuild',
      'event' => 'change',
      'wrapper' => 'ajax-placeholder',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Loading Build...'),
      ),
	);
	$form['elements']['build_1']['#ajax'] = array(
	  'callback' => 'aov_builder_loadDamageCalculatorBuild',
      'event' => 'change',
      'wrapper' => 'ajax-placeholder',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Loading Build...'),
      ),
	);
	$form['elements']['skill']['#ajax'] = array(
	  'callback' => 'aov_builder_loadDamageCalculatorBuild',
      'event' => 'change',
      'wrapper' => 'ajax-placeholder',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Loading Skill...'),
      ),
	);
	// Add placeholder for Ajax response markup
    $form['ajax_response_1'] = array(
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t(' '),
      '#attributes' => array(
        'id' => array('ajax_placeholder_build_1'),
      ),
    );
	$form['ajax_response_2'] = array(
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t(' '),
      '#attributes' => array(
        'id' => array('ajax_placeholder_build_2'),
      ),
	);
	$form['ajax_response_3'] = array(
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t(' '),
      '#attributes' => array(
        'id' => array('ajax_placeholder_skill'),
      ),
	);
	$form['ajax_response_4'] = array(
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t(' '),
      '#attributes' => array(
        'id' => array('ajax_placeholder_damage_calculator'),
      ),
    );
    $form['#attached']['library'][] = 'aov_builder/damage_calculator';
	return $form;
  }
}
//optional @params takes an array of IDs to query. Defaults to all results.
function aov_builder_query_heroes($params = NULL) {
  $data = array();
  $heroKeys = array(
  "field_ability_power",
  "field_ad_per_level",
  "field_armor",
  "field_armor_per_level",
  "field_as_per_level",
  "field_attack_damage",
  "field_attack_speed",
  "field_cdr",
  "field_crit_chance",
  "field_critd_per_level",
  "field_critical_damage",
  "field_flat_pen_ad",
  "field_flat_pen_ap",
  "field_hp",
  "field_hp5_per_level",
  "field_hp_per_level",
  "field_hp_regen_5_seconds",
  "field_life_steal",
  "field_magic_defense",
  "field_magic_life_steal",
  "field_mana",
  "field_mana5_per_level",
  "field_mana_per_level",
  "field_mana_regen_5_seconds",
  "field_md_per_level",
  "field_movement_speed",
  "field_percent_pen_ad",
  "field_percent_pen_ap",
  );
  $query = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'hero');
  if (isset($params['hero'])) {
    $query->condition('nid', $params['hero'], 'IN');
  }
  $nids = $query->execute();
  $nodes = entity_load_multiple('node', $nids);
  foreach ($nodes as $node) {
	$nid = $node->id();
    foreach ($heroKeys as $key) {
	  $data[$nid][$key]['values'] = $node->get($key)->getValue();
	  $data[$nid][$key]['labels'] = $node->$key->getFieldDefinition()->getLabel();
	  $data[$nid]['title'] = $node->label();
    }
  }
  return $data;
}
//optional @params takes an array of IDs to query. Defaults to all results.
function aov_builder_query_items($params = NULL) {
  $data = array();
  $itemKeys = array(
  "field_ability_power",
  "field_armor",
  "field_attack_damage",
  "field_attack_speed",
  "field_cdr",
  "field_crit_chance",
  "field_flat_pen_ad",
  "field_flat_pen_ap",
  "field_hp",
  "field_hp_regen_5_seconds",
  "field_life_steal",
  "field_magic_defense",
  "field_magic_life_steal",
  "field_mana",
  "field_mana_regen_5_seconds",
  "field_movement_speed",
  "field_percent_pen_ad",
  "field_percent_pen_ap",
  "field_passive_description",
  "field_cost",
  "field_movement_speed",
  "field_movement_speed_percent",
  );
  $query = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'item');
  if (isset($params['items'])) {
    $query->condition('nid', $params['items'], 'IN');
  }
  $nids = $query->execute();
  $nodes = entity_load_multiple('node', $nids);
  foreach ($nodes as $node) {
    $nid = $node->id();
	foreach ($itemKeys as $key) {
	  $data[$nid][$key] = $node->get($key)->getValue();
	}
  }
  return $data;
}
//optional @params takes an array of IDs to query. Defaults to all results.
function aov_builder_query_arcana($params = NULL) {
  $data = array();
  $arcanaKeys = array(
  "field_ability_power",
  "field_armor",
  "field_attack_damage",
  "field_attack_speed",
  "field_cdr",
  "field_crit_chance",
  "field_critical_damage",
  "field_flat_pen_ad",
  "field_flat_pen_ap",
  "field_hp",
  "field_hp_regen_5_seconds",
  "field_life_steal",
  "field_magic_defense",
  "field_magic_life_steal",
  "field_movement_speed_percent",
  "field_cost",
  "field_gold_value",
  );
  $query = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'arcana');
  if (isset($params['aracana'])) {
    $query->condition('nid', $params['arcana'], 'IN');
  }
  $nids = $query->execute();
  $nodes = entity_load_multiple('node', $nids);
  foreach ($nodes as $node) {
    $nid = $node->id();
	foreach ($arcanaKeys as $key) {
	  $data[$nid][$key]['values'] = $node->get($key)->getValue();
	}
  }
  return $data;
}
//optional @params takes an array of IDs to query. Defaults to all results.
function aov_builder_query_skills_and_bonuses($params = NULL) {
  $data = array();
  //get skills
  $skillKeys = array(
  "field_scaling",
  "field_scaling_stat",
  "body",
  "field_hero",
  "field_cooldown",
  "field_cooldown_per_level",
  "field_output_type",
  "field_skill_cost",
  "field_skill_type",
  "field_level_1",
  "field_skill_damage_per_level",
  );
  $skillQuery = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'skill');
  if (isset($params['hero'])) {
    $skillQuery->condition('field_hero', $params['hero'], 'IN');
  }
  $skillNids = $skillQuery->execute();
  $skillNodes = entity_load_multiple('node', $skillNids);

  //get bonuses
  $bonusKeys = array(
  "body",
  "field_bonus_damage_level_1",
  "field_bonus_damage_per_level",
  "field_damage_over_time",
  "field_output_type",
  "field_scaling",
  "field_scaling_stat",
  "field_skill_reference",
  );
  $bonusQuery = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'bonus')
	->condition('field_skill_reference', $skillNids, 'IN');
  $bonusNids = $bonusQuery->execute();
  $bonusNodes = entity_load_multiple('node', $bonusNids);

  //get scaling stats from term
  $termQuery = \Drupal::entityQuery('taxonomy_term')
   ->condition('vid', 'scaling_stats');
  $tids = $termQuery->execute();
  $statTerms = entity_load_multiple('taxonomy_term', $tids);
  
  //get output types from term
  $outputQuery = \Drupal::entityQuery('taxonomy_term')
   ->condition('vid', 'output_type');
  $stids = $outputQuery->execute();
  $outputTerms = entity_load_multiple('taxonomy_term', $stids);
  
  //assemble data keyed by hero, then skill, then bonuses
  foreach ($skillNodes as $node) {
	$heroID = $node->get('field_hero')->getValue()[0]['target_id'];
	$nid = $node->id();
	$data[$heroID][$nid]['title']['values'] = $node->getTitle();
	foreach ($skillKeys as $key) {
	  if ($key == 'field_scaling_stat') {
		if ($node->get('field_scaling_stat')->getValue()) {
	      $statTarget = $node->get('field_scaling_stat')->getValue()[0]['target_id'];
		  if ($statTerms[$statTarget]) {
		    $data[$heroID][$nid][$key]['values'] = strip_tags($statTerms[$statTarget]->get('description')->value);
		    $data[$heroID][$nid][$key]['termname'] = $statTerms[$statTarget]->getName();
		  }
		}
	  } else if ($key == 'field_output_type') {
		if ($node->get('field_output_type')->getValue()) {
	      $outputTarget = $node->get('field_output_type')->getValue()[0]['target_id'];
		  if ($outputTerms[$outputTarget]) {
		    $data[$heroID][$nid][$key]['values'] = strip_tags($outputTerms[$outputTarget]->get('description')->value);
		    $data[$heroID][$nid][$key]['termname'] = $outputTerms[$outputTarget]->getName();
	      } else {
		    $data[$heroID][$nid][$key]['values'] = "N/A";
		  }
		}
	  }
	  else {
		$data[$heroID][$nid][$key]['values'] = $node->get($key)->getValue();
	  }
	  foreach ($bonusNodes as $bNode) {
		if ($bNode->get('field_skill_reference')->getValue()) {
	      $skillID = $bNode->get('field_skill_reference')->getValue()[0]['target_id'];
		}
		if ($bNode->get('field_scaling_stat')->getValue()) {
		  $bStatTarget = $bNode->get('field_scaling_stat')->getValue()[0]['target_id'];
		}
		if ($bNode->get('field_output_type')->getValue()) {
		  $bOutputTarget = $bNode->get('field_output_type')->getValue()[0]['target_id'];
		}
	    $bNid = $bNode->id();
		if ($skillID == $nid) {
	      foreach ($bonusKeys as $bKey) {
			if ($bKey == 'field_scaling_stat') {
			  if ($statTerms[$bStatTarget]) {
			    $data[$heroID][$nid]['bonuses'][$bNid][$bKey]['values'] = strip_tags($statTerms[$bStatTarget]->get('description')->value);
				$data[$heroID][$nid]['bonuses'][$bNid][$bKey]['termname'] = $statTerms[$bStatTarget]->getName();
			  }
			} else if ($bKey == 'field_output_type') {
			  if ($outputTerms[$bOutputTarget]) {
			    $data[$heroID][$nid]['bonuses'][$bNid][$bKey]['values'] = strip_tags($outputTerms[$bOutputTarget]->get('description')->value);
				$data[$heroID][$nid]['bonuses'][$bNid][$bKey]['termname'] = $outputTerms[$bOutputTarget]->getName();
			  }
			} else {
			  $data[$heroID][$nid]['bonuses'][$bNid][$bKey]['values'] = $bNode->get($bKey)->getValue();
			}
	      }
		}
      }
	}
  }
  return $data;
}

function aov_builder_submit_build(array $form, FormStateInterface $form_state) {
  $uid = \Drupal::currentUser()->id();
  $data = json_decode($form['elements']['full_build_hidden']['#value']);
  $heroNode = \Drupal\node\Entity\Node::load($form['elements']['hero']['#value']);
  $node = Node::create([
    'type' => 'build',
	'author' => $uid,
    'field_hero' => [
	  $form['elements']['hero']['#value'],
	],
	'field_hero_level' => [
	  $form['elements']['level']['#value'],
	],	
	'field_items' => [
	  $form['elements']['flexbox_00']['item_1']['#value'],
	  $form['elements']['flexbox_00']['item_2']['#value'],
	  $form['elements']['flexbox_00']['item_3']['#value'],
	  $form['elements']['flexbox_00']['item_4']['#value'],
	  $form['elements']['flexbox_00']['item_5']['#value'],
	  $form['elements']['flexbox_00']['item_6']['#value'],
	],
	'field_green_arcana' => [
	  $form['elements']['arcana']['flexbox_2']['green_level_1']['#value'],
	  $form['elements']['arcana']['flexbox_2']['green_level_4']['#value'],
	  $form['elements']['arcana']['flexbox_2']['green_level_7']['#value'],
	  $form['elements']['arcana']['flexbox_2']['green_level_10']['#value'],
	  $form['elements']['arcana']['flexbox_2']['green_level_13']['#value'],
	  $form['elements']['arcana']['flexbox_2']['green_level_16']['#value'],
	  $form['elements']['arcana']['flexbox_2']['green_level_19']['#value'],
	  $form['elements']['arcana']['flexbox_2']['green_level_22']['#value'],
	  $form['elements']['arcana']['flexbox_2']['green_level_25']['#value'],
	  $form['elements']['arcana']['flexbox_2']['green_level_28']['#value'],
	],
    'field_purple_arcana' => [
	  $form['elements']['arcana']['flexbox_03']['purple_level_1']['#value'],
	  $form['elements']['arcana']['flexbox_03']['purple_level_4']['#value'],
	  $form['elements']['arcana']['flexbox_03']['purple_level_7']['#value'],
	  $form['elements']['arcana']['flexbox_03']['purple_level_10']['#value'],
	  $form['elements']['arcana']['flexbox_03']['purple_level_13']['#value'],
	  $form['elements']['arcana']['flexbox_03']['purple_level_16']['#value'],
	  $form['elements']['arcana']['flexbox_03']['purple_level_19']['#value'],
	  $form['elements']['arcana']['flexbox_03']['purple_level_22']['#value'],
	  $form['elements']['arcana']['flexbox_03']['purple_level_25']['#value'],
	  $form['elements']['arcana']['flexbox_03']['purple_level_28']['#value'],
	],
    'field_red_arcana' => [
	  $form['elements']['arcana']['flexbox']['red_level_1']['#value'],
	  $form['elements']['arcana']['flexbox']['red_level_4']['#value'],
	  $form['elements']['arcana']['flexbox']['red_level_7']['#value'],
	  $form['elements']['arcana']['flexbox']['red_level_10']['#value'],
	  $form['elements']['arcana']['flexbox']['red_level_13']['#value'],
	  $form['elements']['arcana']['flexbox']['red_level_16']['#value'],
	  $form['elements']['arcana']['flexbox']['red_level_19']['#value'],
	  $form['elements']['arcana']['flexbox']['red_level_22']['#value'],
	  $form['elements']['arcana']['flexbox']['red_level_25']['#value'],
	  $form['elements']['arcana']['flexbox']['red_level_28']['#value'],
	],
    'field_ability_power' => $data->field_ability_power,
    'field_armor' => $data->field_armor,
    'field_attack_damage' => $data->field_attack_damage,
    'field_attack_speed' => $data->field_attack_speed,
    'field_cdr' => $data->field_cdr,
    'field_crit_chance' => $data->field_crit_chance,
    'field_critical_damage' => $data->field_critical_damage,
    'field_flat_pen_ad' => $data->field_flat_pen_ad,
    'field_flat_pen_ap' => $data->field_flat_pen_ap,
    'field_hp' => $data->field_hp,
    'field_hp_regen_5_seconds' => $data->field_hp_regen_5_seconds,
    'field_life_steal' => $data->field_life_steal,
    'field_magic_defense' => $data->field_magic_defense,
    'field_magic_life_steal' => $data->field_magic_life_steal,
    'field_mana' => $data->field_mana,
    'field_mana_regen_5_seconds' => $data->field_mana_regen_5_seconds,
    'field_movement_speed' => $data->field_movement_speed,
    'field_percent_pen_ad' => $data->field_percent_pen_ad,
    'field_percent_pen_ap' => $data->field_percent_pen_ap,
	'field_skill_1_level' => $form['elements']['skills']['flexbox_04']['skill_1_level']['#value'],
	'field_skill_2_level' => $form['elements']['skills']['flexbox_04']['skill_2_level']['#value'],
	'field_ultimate_level' => $form['elements']['skills']['flexbox_04']['ultimate_level']['#value'],
  ]);
  $tag = $form['elements']['custom_tag']['#value'];
  if (!$tag) {
    $tag = $node->id();
  }
  $title = $heroNode->getTitle() . ' - ' . $tag;
  $node->setTitle($title);
  $node->save();
  $path = '/form/build-comparison?build=' . $node->id();
  $response = new RedirectResponse($path);
  $response->send();
  return;
}

function aov_builder_loadBuild(array &$form, FormStateInterface $form_state) {
	$triggerElement = $form_state->getTriggeringElement()['#name'];
    $buildQuery = \Drupal::entityQuery('node')
      ->condition('status', 1)
      ->condition('type', 'build')
      ->condition('nid', $form_state->getValue($triggerElement));
    $nid = $buildQuery->execute();
    $build = node_load(array_shift($nid));
	$heroData = aov_builder_query_heroes(array('hero' => $build->field_hero->getValue()[0]['target_id']));
	$arr = array();
	foreach ($build->field_items->getValue() as $item) {
	  array_push($arr, $item['target_id']);
	}
	$itemData = aov_builder_query_items(array('items' => $arr));
	$allArcana = array_merge($build->field_green_arcana->getValue(), $build->field_red_arcana->getValue(), $build->field_purple_arcana->getValue());
	$arcanaArr = array();
	foreach ($allArcana as $arcana) {
	  array_push($arcanaArr, $arcana['target_id']);
	}
	$arcanaData = aov_builder_query_arcana(array('arcana' => $arcanaArr));
    $form['#attached']['drupalSettings']['heroData'] = $heroData;
	$form['#attached']['drupalSettings']['itemData'] = $itemData;
	$form['#attached']['drupalSettings']['arcanaData'] = $arcanaData;
    $buildArray = array(
	//'field_hero' => 'Hero',
	//'field_items' => 'Items', 
	//'field_green_arcana' => 'Green Arcana',
    //'field_purple_arcana' => 'Purple Arcana',
    //'field_red_arcana' => 'Red Arcana',
	'field_hero_level' => 'Level',
    'field_ability_power' => 'Ability Power',
    'field_armor' => 'Armor',
    'field_attack_damage' => 'Attack Damage',
    'field_attack_speed' => 'Attack Speed',
    'field_cdr' => 'CDR',
    'field_crit_chance' => 'Crit Chance',
    'field_critical_damage' => 'Crit Damage',
    'field_flat_pen_ad' => 'Flat Pen AD',
    'field_flat_pen_ap' => 'Flat Pen AP',
    'field_hp' => 'HP',
    'field_hp_regen_5_seconds' => 'HP Regen / 5 Seconds',
    'field_life_steal' => 'Life Steal',
    'field_magic_defense' => 'Magic Defense',
    'field_magic_life_steal' => 'Magic Life Steal',
    'field_mana' => 'Mana',
    'field_mana_regen_5_seconds' => 'Mana Regen / 5 Seconds',
    'field_movement_speed' => 'Movement Speed',
    'field_percent_pen_ad' => 'Percent Pen AD',
    'field_percent_pen_ap' => 'Percent Pen AP',
	);
	$markup = '<div id="' . $triggerElement . '_values">';
	foreach ($buildArray as $key => $label) {
	  $markup .= '<div id="' . $triggerElement . $key . '">' . $label . ': ' . $build->$key->getValue()[0]['value'] . '</div>';
	}
	$markup .= '</div>';
    // Add an Ajax response
    $content = [
      '#markup' => $markup,
	  '#attributes' => array(
	    'id' => array('ajax_placeholder_' . $triggerElement),
	  ),
    ];
    $response = new AjaxResponse();
	$response->addCommand(new HtmlCommand('#ajax_placeholder_' . $triggerElement, $content));
    return $response;
  }
  
  function aov_builder_submit_comparison(array $form, FormStateInterface $form_state) {
	if ($form_state->getValue('build_to_continue_with_') == 1) {
      $buildID = $form_state->getValue('build_1');
	} else {
      $buildID = $form_state->getValue('build_2');
	}
    $path = '/form/damage-calculator?build=' . $buildID;
    $response = new RedirectResponse($path);
    $response->send();
    return;
  }
  
  function aov_builder_loadDamageCalculatorBuild(array &$form, FormStateInterface $form_state) {
	$trigger = $form_state->getTriggeringElement();
    $triggerElement = $trigger['#name'];
	$triggerElementValue = $trigger['#value'];
	$selectedSkill = $form_state->getValue('skill');
	//load both builds either way on this form, since we need to compare
    $buildQuery = \Drupal::entityQuery('node')
      ->condition('status', 1)
      ->condition('type', 'build')
      ->condition('nid', array($form_state->getValue('build_1'), $form_state->getValue('build_2')), 'IN');
    $nids = $buildQuery->execute();
	//load both builds either way on this form, since we need to compare
    $builds = node_load_multiple($nids);
	//get hero IDs from the builds
	$heroes = array();
	$arr = array();
	$arcanaArr = array();
	foreach ($builds as $build) {
      array_push($heroes, $build->field_hero->getValue()[0]['target_id']);
	  //get item IDs from the builds
	  foreach ($build->field_items->getValue() as $item) {
        array_push($arr, $item['target_id']);
	  }
	  //get arcana IDs from the builds
	  $allArcana = array_merge($build->field_green_arcana->getValue(), $build->field_red_arcana->getValue(), $build->field_purple_arcana->getValue());
	  foreach ($allArcana as $arcana) {
	    array_push($arcanaArr, $arcana['target_id']);
	  }
	}
	//load hero data for both heroes
	$heroOneData = aov_builder_query_heroes(array('hero' => $heroes));

	//load skill data for both heroes
	$skillData = aov_builder_query_skills_and_bonuses(array('hero' => $heroes));

	//load all of the items in (this is just for images and later combos, item stats are baked into the build saves already)
	$itemData = aov_builder_query_items(array('items' => $arr));

	//load all of the arcana in (this is just for images and may be unnessecary, arcana stats are baked into the build saves already)
	$arcanaData = aov_builder_query_arcana(array('arcana' => $arcanaArr));
    
	//Begin generating our AJAX response
    $response = new AjaxResponse();
	
	//if we changed the hero...
	if ($triggerElement == 'build_1' || $triggerElement == 'build_2') {
      $buildArray = array(
	  'field_hero_level' => 'Level',
      'field_ability_power' => 'Ability Power',
      'field_armor' => 'Armor',
      'field_attack_damage' => 'Attack Damage',
      'field_attack_speed' => 'Attack Speed',
      'field_cdr' => 'CDR',
      'field_crit_chance' => 'Crit Chance',
      'field_critical_damage' => 'Crit Damage',
      'field_flat_pen_ad' => 'Flat Pen AD',
      'field_flat_pen_ap' => 'Flat Pen AP',
      'field_hp' => 'HP',
      'field_hp_regen_5_seconds' => 'HP Regen / 5 Seconds',
      'field_life_steal' => 'Life Steal',
      'field_magic_defense' => 'Magic Defense',
      'field_magic_life_steal' => 'Magic Life Steal',
      'field_mana' => 'Mana',
      'field_mana_regen_5_seconds' => 'Mana Regen / 5 Seconds',
      'field_movement_speed' => 'Movement Speed',
      'field_percent_pen_ad' => 'Percent Pen AD',
      'field_percent_pen_ap' => 'Percent Pen AP',
	  );
	  //Generate markup for build data
	  $markup = '<div id="' . $triggerElement . '_values">';
	  foreach ($buildArray as $key => $label) {
		$i = 0;
		if ($i % 10 == 0) {
		  $markup .='<div class="break">';
		}
	    $markup .= '<div id="' . $triggerElement . $key . '">' . $label . ': ' . $builds[$triggerElementValue]->$key->getValue()[0]['value'] . '</div>';
		if ($i % 10 == 0) {
		  $markup .='</div>';
		}
		$i++;
	  }
	  $markup .= '</div>';
      // Add an Ajax response
      $content = [
        '#markup' => $markup,
	    '#attributes' => array(
	      'id' => array('ajax_placeholder_' . $triggerElement),
	    ),
      ];
      $response->addCommand(new HtmlCommand('#ajax_placeholder_' . $triggerElement, $content));
	}
	//If we changed the skill...
	if ($triggerElement == 'skill') {
	  $skill = $skillData[$builds[$form_state->getValue('build_1')]->field_hero->getValue()[0]['target_id']][$selectedSkill];
	  $typeKeys = array(
	    'Passive' => 'field_hero_level',
	    'Skill 1' => 'field_skill_2_level',
	    'Skill 2' => 'field_skill_2_level',
	    'Ultimate' => 'field_ultimate_level',
	  );
      $skillArray = array(
	    "Title" => $skill['title']['values'],
		"Description" => $skill['body']['values'][0]['value'],
		"Scaling Value" => $skill['field_scaling']['values'][0]['value'],
        "Scaling Stat" => $skill['field_scaling_stat']['termname'],
		"Output Type" => $skill['field_output_type']['termname'],
	  );
	  $scaler = $skill['field_scaling_stat']['values'];
	  //Do Calculations for output values
	  if ($skill['field_skill_type']['values'][0]['value'] == 'Passive') {
        //Output = (Level 1 Value + (Level * (Per Level - 1)) + (Scaling * Build Scaling Stat)
		if (isset($builds[$form_state->getValue('build_1')]->$scaler)) {
          $skillArray['Output'] = ($skill['field_level_1']['values'][0]['value'] + ($skill['field_skill_damage_per_level']['values'][0]['value'] * ($builds[$form_state->getValue('build_1')]->field_hero_level->getValue()[0]['value'] - 1))) + ($skill['field_scaling']['values'][0]['value'] * $builds[$form_state->getValue('build_1')]->$scaler->getValue()[0]['value']);
		}
		$skillArray['Cooldown'] = $skill['field_cooldown']['values'][0]['value'] - ($skill['field_cooldown_per_level']['values'][0]['value'] * ($builds[$form_state->getValue('build_1')]->field_hero_level->getValue()[0]['value'] - 1));
	  } 
	  else {
        //Output = (Level 1 Value + (Level * (Per Level - 1)) + (Scaling * Build Scaling Stat)
		if (isset($builds[$form_state->getValue('build_1')]->$scaler)) {
          $skillArray['Output'] = ($skill['field_level_1']['values'][0]['value'] + ($skill['field_skill_damage_per_level']['values'][0]['value'] * ($skill[$typeKeys[$skill['field_skill_type']['values'][0]['value']]]['values'][0]['value'] - 1))) + ($skill['field_scaling']['values'][0]['value'] * $builds[$form_state->getValue('build_1')]->$scaler->getValue()[0]['value']);
		}
		$skillArray['Cooldown'] = $skill['field_cooldown']['values'][0]['value'] - ($skill['field_cooldown_per_level']['values'][0]['value'] * ($skill[$typeKeys[$skill['field_skill_type']['values'][0]['value']]]['values'][0]['value'] - 1));
	  }
	  switch ($skill['field_output_type']['termname']) {
		  case 'Physical Damage':
		    $skillArray['Final Physical Output'] += $skillArray['Output'];
		  break;
		  case 'Magic Damage':
		    $skillArray['Final Magic Output'] += $skillArray['Output'];
		  break;
		  case 'True Damage':
		    $skillArray['Final True Damage'] += $skillArray['Output'];
		  break;
		  default:
		  break;
		}
	  //Add Bonus Values
	  foreach ($skill['bonuses'] as $key => $value) {
		$bonusScaler = $skill['bonuses'][$key]['field_scaling_stat']['values'];
        $bonusArray[$key] = array(
		  "Description" => $skill['bonuses'][$key]['body']['values'][0]['value'],
		  "Scaling Value" => $skill['bonuses'][$key]['field_scaling']['values'][0]['value'],
          "Scaling Stat" => $skill['bonuses'][$key]['field_scaling_stat']['termname'],
		  "Output Type" => $skill['bonuses'][$key]['field_output_type']['termname'],
	    );
		if ($skill['field_skill_type']['values'][0]['value'] == 'Passive') {
		  //Output = (Level 1 Value + (Level * (Per Level - 1)) + (Scaling * Build Scaling Stat)
		  if (isset($builds[$form_state->getValue('build_1')]->$bonusScaler)) {
            $bonusArray[$key]['Output'] = ($skill['bonuses'][$key]['field_level_1']['values'][0]['value'] + ($skill['field_skill_damage_per_level']['values'][0]['value'] * ($builds[$form_state->getValue('build_1')]->field_hero_level->getValue()[0]['value'] - 1))) + ($skill['bonuses'][$key]['field_scaling']['values'][0]['value'] * $builds[$form_state->getValue('build_1')]->$bonusScaler->getValue()[0]['value']);
	      }
		}
	    else {
          //Output = (Level 1 Value + (Level * (Per Level - 1)) + (Scaling * Build Scaling Stat)
		  if (isset($builds[$form_state->getValue('build_1')]->$bonusScaler)) {
            $bonusArray[$key]['Output'] = ($skill['bonuses'][$key]['field_level_1']['values'][0]['value'] + ($skill['field_skill_damage_per_level']['values'][0]['value'] * ($skill[$typeKeys[$skill['field_skill_type']['values'][0]['value']]]['values'][0]['value'] - 1))) + ($skill['bonuses'][$key]['field_scaling']['values'][0]['value'] * $builds[$form_state->getValue('build_1')]->$bonusScaler->getValue()[0]['value']);
	      }
		}
		switch ($skill['bonuses'][$key]['field_output_type']['termname']) {
		  case 'Physical Damage':
		    $skillArray['Final Physical Output'] += $bonusArray[$key]['Output'];
		  break;
		  case 'Magic Damage':
		    $skillArray['Final Magic Output'] += $bonusArray[$key]['Output'];
		  break;
		  case 'True Damage':
		    $skillArray['Final True Damage'] += $bonusArray[$key]['Output'];
		  break;
		  default:
		  break;
		}
	  }

	  //Generate markup for skill choice
	  $skillMarkup = '<div id="skill_data">';
	  foreach ($skillArray as $key => $value) {
        $skillMarkup .= '<div>' . $key . ': ' . $value . '</div>';
	  }
	  $skillmarkup .= '<div id="bonus_data"><h3>Additional Effects</h3>';
		foreach ($bonusArray as $bonus) {
		  $skillMarkup .='<div class="bonus-break">';
          foreach ($bonus as $key => $value) {
            $skillMarkup .= '<div>' . $key . ': ' . $value . '</div>';
		  }
		  $skillMarkup .= '</div>';
		}
	  $skillMarkup .= '</div></div>';

	  $skillContent = [
        '#markup' => $skillMarkup,
	    '#attributes' => array(
	      'id' => array('ajax_placeholder_skill'),
	    ),
      ];
	  $response->addCommand(new HtmlCommand('#ajax_placeholder_skill', $skillContent));
	}

	//Generate markup for damage calculation if a defending hero is selected
	if ($form_state->getValue('build_2')) {
	  $attackingHero = $builds[$form_state->getValue('build_1')];
	  $defendingHero = $builds[$form_state->getValue('build_2')];
	  $damageArray = array(
        "AD Pierce" => $attackingHero->field_flat_pen_ad->getValue()[0]['value'],
        "AD Pierce (%)" => $attackingHero->field_percent_pen_ad->getValue()[0]['value'],
        "AP" => $attackingHero->field_ability_power->getValue()[0]['value'],
        "AP Pierce" => $attackingHero->field_flat_pen_ap->getValue()[0]['value'],
        "AP Pierce (%)" => $attackingHero->field_percent_pen_ap->getValue()[0]['value'],
        "Armor Value" => $defendingHero->field_armor->getValue()[0]['value'],
        "MD Value" => $defendingHero->field_magic_defense->getValue()[0]['value'],
        "Defender Health" => $defendingHero->field_hp->getValue()[0]['value'],
	    );
	  if ($skill) {
		$damageArray['AD'] = $skillArray['Final Physical Output'];
		$damageArray['AP'] = $skillArray['Final Magic Output'];
		$damageArray['True Damage'] = isset($skillArray['True Damage']) || $skillArray['True Damage'] = 0;
	  }
	  else {
        $damageArray['AD'] = $attackingHero->field_attack_damage->getValue()[0]['value'];
		$damageArray['AP'] = $attackingHero->field_ability_power->getValue()[0]['value'];
		$damageArray['True Damage'] = 'Auto Attack True Damage is currently broken';
	  }
	  $damageArray['Armor Post Pen'] = ($damageArray['Armor Value'] - $damageArray['AD Pierce']) - (($damageArray['Armor Value'] - $damageArray['AD Pierce']) - (($damageArray['AD Pierce (%)']/100) * $damageArray['Armor Value']));
	  $damageArray['MD Post Pen'] = $damageArray['MD Value'] - $damageArray['AP Pierce'] - ($damageArray['AP Pierce (%)'] * $damageArray['MD Value']);
	  $damageArray['Percent Reduction'] = $damageArray['Armor Value'] / ($damageArray['Armor Value'] + 600);
	  $damageArray['AD Reduced'] = $damageArray['AD'] * $damageArray['Percent Reduction'];
	  $damageArray['AP Reduced'] = $damageArray['AP'] * $damageArray['Percent Reduction'];
	  $damageArray['Damage Output'] = ($damageArray['AD'] - $damageArray['AD Reduced']) + ($damageArray['AP'] - $damageArray['AP Reduced']) + $damageArray['True Damage'];
	  if ($skill) {
        $damageArray['DPS'] = $damageArray['Damage Output'] / $skillArray['Cooldown'];
	  }
      else {
        $damageArray['DPS'] = $damageArray['Damage Output'] / (1 + ($attackingHero->field_attack_speed->getValue()[0]['value']/100));
	  }
	  $damageArray['Time to Kill (Seconds)'] = $damageArray['Defender Health'] / $damageArray['DPS'];

	  $damageMarkup = '<div id="damage_data">';
	  foreach ($damageArray as $key => $value) {
		$i = 0;
		if ($i % 10 == 0) {
		  $damageMarkup .='<div class="break">';
		}
	    $damageMarkup .= '<div>' . $key . ': ' . $value . '</div>';
		if ($i % 10 == 0) {
		  $damageMarkup .='</div>';
		}
		$i++;
	  }
	  $damageMarkup .= '</div>';

	  $damageContent = [
        '#markup' => $damageMarkup,
	    '#attributes' => array(
	      'id' => array('ajax_placeholder_damage_calculator'),
	    ),
      ];

	  $response->addCommand(new HtmlCommand('#ajax_placeholder_damage_calculator', $damageContent));
	}
    return $response;
  }

  function aov_builder_loadData(array &$form, FormStateInterface $form_state) {
    $hero = $form_state->getValue('hero');
	//re-generate hero, skill, and bonus data. Item and Arcana data do not need to be changed
    $heroData = aov_builder_query_heroes(array('hero' => $hero));
    $skillAndBonusData = aov_builder_query_skills_and_bonuses(array('hero' => $hero));
	$response = new AjaxResponse();
	$response->addCommand(new SettingsCommand([
      'heroData' => $heroData,
    ], TRUE));
	$response->addCommand(new SettingsCommand([
      'skillAndBonusData' => $skillAndBonusData,
    ], TRUE));
    return $response;
  }